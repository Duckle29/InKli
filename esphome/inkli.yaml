substitutions:
  name: "inkli"
  friendly_name: "InKli"
  version: "v0.1.1"

# Enable logging
logger:
  level: INFO

# esp32_touch:
#   setup_mode: False

binary_sensor:
  - platform: gpio
    id: btn
    pin:
      number: GPIO32
      inverted: True
      #allow_other_uses: True
      mode:
        input: True
        pullup: True
    on_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - display.page.show_next: disp
          - component.update: disp

      - min_length: 1s
        max_length: 5s
        then:
          - if:
              condition:
                or:
                  - display.is_displaying_page: ap_info
                  - display.is_displaying_page: page_setup
              then:
                - display.page.show: page_co2_graph
              else:
                - display.page.show: ap_info
          - if:
              condition:
                and:
                  - not:
                    - wifi.enabled:
                  - display.is_displaying_page: ap_info
              then:
                - wifi.enable:
                # TODO: non-blocking delay - delay: 5min
                - if:
                    condition:
                      wifi.connected:
                    else:
                      wifi.disable:


      - min_length: 5s
        max_length: 60s
        then:
          - display.page.show: page_updating
          - component.update: disp
          - delay: 1s
          - ota.http_request.flash:
              md5_url: https://otaserv.mikkel.cc/inkli/inkli-esp32.ota.bin.md5
              url: https://otaserv.mikkel.cc/inkli/inkli-esp32.ota.bin
          - display.page.show: page_update_failed
          - component.update: disp
          - delay: 10s
          - display.page.show: page_co2_graph
          - component.update: disp

  # - platform: esp32_touch
  #   pin: GPIO33
  #   threshold: 1040
  #   id: touch_test
  #   filters:
  #     - delayed_off: 
  #         milliseconds: 500
  #   on_press: 
  #     then:
  #       - display.page.show_next: disp

sensor:
  - platform: uptime
    id: uptime_sens
    on_value_range:
      - above: 60.0
        then:
          - if:
              condition:
                - display.is_displaying_page: page_setup
              then:
                - display.page.show: page_co2_graph

  - platform: scd30
    i2c_id: i2c_scd30
    address: 0x61
    update_interval: 30s
    temperature_offset: 3
    co2:
      id: scd30_co2
      name: "co2"
      accuracy_decimals: 0
      internal: False
      on_value_range:
        - above: 2000
          then:
            - output.set_level:
                id: led_status
                level: 50%
            - output.turn_on: led_status
        - below: 2000
          then:
            - output.turn_off: led_status

    temperature:
      id: scd30_t
      name: "temperature"
      accuracy_decimals: 2
      internal: False
    humidity:
      name: "humidity"
      id: scd30_rh
      accuracy_decimals: 2
      internal: False
  
  - platform: wifi_signal
    id: wifi_sig
    update_interval: 60s
    filters:
      - lambda: return min(max(2 * (x+100.0), 0.0), 100.0);
  
text_sensor:
  - platform: wifi_info
    ip_address: 
      id: wifi_ip_addr
    ssid: 
      id: wifi_ssid
    mac_address: 
      id: wifi_mac

# external_components:
#   - source: github://pr#8112
#     components:
#       - graph
#     #refresh: 1s

# Example on how to implement a UI section in HA for manual calibration.
# Note: Please enter first a CO2 value before pressing the button.
button:
  - platform: factory_reset
    name: Restart with Factory Default Settings
    
  - platform: template
    name: "CO2 sensor force manual calibration"
    entity_category: "config"
    on_press:
      then:
        - scd30.force_recalibration_with_reference:
            value: !lambda 'return id(co2_cal).state;'

number:
  - platform: template
    name: "CO2 manual calibration value"
    optimistic: true
    min_value: 350
    max_value: 4500
    initial_value: 400
    step: 1
    id: co2_cal
    icon: "mdi:molecule-co2"
    entity_category: "config"

output:
  - platform: ledc
    id: led_status
    pin: GPIO2
    frequency: 19531

graph:
  - id: co2_graph
    height: 61
    width: 215
    duration: 
      days: 0
      hours: 12
    border: True
    y_grid: 250
    min_range: 1000
    min_value: 0
    traces:
      - sensor: scd30_co2
        line_type: SOLID
        line_thickness: 2
        continuous: True

  - id: temp_graph
    height: 61
    width: 215
    duration: 
      days: 0
      hours: 12
    border: True
    y_grid: 10
    min_range: 20
    min_value: -20
    traces:
      - sensor: scd30_t
        line_type: SOLID
        line_thickness: 2
        continuous: True

  - id: humi_graph
    height: 61
    width: 215
    duration: 
      days: 0
      hours: 12
    border: True
    y_grid: 10
    min_range: 50
    min_value: 0
    traces:
      - sensor: scd30_rh
        line_type: SOLID
        line_thickness: 2
        continuous: True

font:
  # gfonts://family[@weight]
  - file:
      type: gfonts
      family: Literata
      weight: 700
    id: literata_b
    size: 25
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: [
          "\ue1ff", # Thermometer
          "\uf87e", # Humidity %
          "\ue7b0", # CO2
        ]
  - file:
      type: gfonts
      family: Literata
      weight: 700
    id: literata_med_b
    size: 20
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: [
          "\ue1ff", # Thermometer
          "\uf87e", # Humidity %
          "\ue7b0", # CO2
          "\uf0ef", # Wifi ?
          "\ue1d8", # WiFi Connected 4/4
          "\uebe1", # WiFi Connected 3/4
          "\uebd6", # WiFi Connected 2/4
          "\uebe4", # WiFi Connected 1/4
          "\ue1da", # WiFi Off
        ]

  - file:
      type: gfonts
      family: Literata
      weight: 400
    id: literata_smol
    size: 15
  
  - file:
      type: gfonts
      family: Literata
      weight: 600
    id: literata_less_smol
    size: 14
  
  - file:
      type: gfonts
      family: IBM Plex Mono 
      weight: 600
    id: mono_reg
    size: 20
  
  - file:
      type: gfonts
      family: IBM Plex Mono 
      weight: 600
    id: mono_med
    size: 16
  
  - file:
      type: gfonts
      family: IBM Plex Mono 
      weight: 400
    id: mono_smol
    size: 13

display:
  - platform: waveshare_epaper
    id: disp
    cs_pin: GPIO5
    dc_pin: GPIO17
    reset_pin: GPIO16
    busy_pin: GPIO4
    model: 2.13inv3
    full_update_every: 60
    rotation: 270
    update_interval: 30s
    pages:
      - id: page_setup
        lambda: |-
          const int line_height = 15;
          const int offset = 10;
          std::vector<std::string> lines = {
            "For full functionality",
            "go to:",
            "sche.cc/inklisetup",
            "and connect me to wifi",
            "${version}"
          };

          it.print(0, 0, id(mono_reg), "HI! I'm InKli :D");
          
          int line_num = 1;
          for (auto line : lines)
          {
            it.print(0, offset+ line_height*line_num++, id(mono_med), line.c_str());
          }
      - id: page_co2_graph 
        lambda: |-
          if( id(wifi_id).is_disabled() )
          {
            it.print(it.get_width()/2, 0, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\ue1da");
            ESP_LOGI("blep", "Wifi off");
          }
          else if( id(wifi_id).is_connected() )
          {
            if( id(wifi_sig).state > 75.0 )
            {
              it.print(it.get_width()/2, 0, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\ue1d8"); // WiFi 4/4
              ESP_LOGI("blep", "Wifi 4/4");
            }
            else if( id(wifi_sig).state > 50.0  )
            {
              it.print(it.get_width()/2, 0, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\uebe1"); // WiFi 3/4
              ESP_LOGI("blep", "Wifi 3/4");
            }
            else if( id(wifi_sig).state > 25.0  )
            {
              it.print(it.get_width()/2, 0, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\uebd6"); // WiFi 2/4
              ESP_LOGI("blep", "Wifi 2/4");
            }
            else // Connected but below 25% strength
            {
              it.print(it.get_width()/2, 0, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\uebe4"); // WiFi 1/4
              ESP_LOGI("blep", "Wifi 1/4");
            }
          }
          else
          {
            it.print(it.get_width()/2, 0, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\uf0ef");
            ESP_LOGI("blep", "Wifi ?");
          }



          it.printf(10, 0, id(literata_b), "\ue1ff%.1fÂ°C", id(scd30_t).state);
          it.printf(it.get_width() -10, 0, id(literata_b), TextAlign::RIGHT, "\uf87e%.1f%%", id(scd30_rh).state);
          it.printf(it.get_width()/2, 30, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "%.0fppm", id(scd30_co2).state);
          
          const int y_grid = 250;
          const int graph_width = 215;
          const int graph_height = it.get_height()/2;
          const int graph_start_x = it.get_width() - graph_width; // Right adjust graph
          const int graph_start_y = it.get_height() - graph_height; // Bottom adjust graph

          // Generate y-axis labels
          float graph_lim = id(co2_graph).get_graph_limit_max();
          if (std::isnan(graph_lim))
          {
            graph_lim = 0;
          }
          it.printf(it.get_width()-220, graph_start_y, id(literata_smol), TextAlign::CENTER_RIGHT, "%.0f", graph_lim);
          it.printf(it.get_width()-220, graph_start_y + graph_height/2, id(literata_smol), TextAlign::CENTER_RIGHT, "%.0f", graph_lim/2);

          // Graph
          it.graph(graph_start_x, graph_start_y, id(co2_graph));
        

      - id: page_t_graph
        lambda: |-
          it.printf(10, 0, id(literata_b), "\ue7b0%.0f", id(scd30_co2).state);
          if( id(scd30_co2).state < 1000 )
          {
            it.print(80, 0, id(literata_med_b), "ppm");
          }
          else
          {
            it.print(88, 0, id(literata_med_b), "ppm");
          }
          it.printf(it.get_width() -10, 0, id(literata_b), TextAlign::RIGHT, "\uf87e%.1f%%", id(scd30_rh).state);
          it.printf(it.get_width()/2, 30, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\ue1ff%.1fÂ°C", id(scd30_t).state);
          
          const int y_grid = 250;
          const int graph_width = 215;
          const int graph_height = it.get_height()/2;
          const int graph_start_x = it.get_width() - graph_width; // Right adjust graph
          const int graph_start_y = it.get_height() - graph_height; // Bottom adjust graph

          // Generate y-axis labels
          float graph_lim = id(temp_graph).get_graph_limit_max();
          if (std::isnan(graph_lim))
          {
            graph_lim = 0;
          }
          it.printf(it.get_width()-220, graph_start_y, id(literata_smol), TextAlign::CENTER_RIGHT, "%.0f", graph_lim);
          it.printf(it.get_width()-220, graph_start_y + graph_height/2, id(literata_smol), TextAlign::CENTER_RIGHT, "%.0f", graph_lim/2);

          // Graph
          it.graph(graph_start_x, graph_start_y, id(temp_graph));
        

      - id: page_rh_graph
        lambda: |-
          it.printf(10, 0, id(literata_b), "\ue1ff%.1fÂ°C", id(scd30_t).state);
          it.printf(it.get_width() -2, 0, id(literata_med_b), TextAlign::RIGHT, "ppm");
          it.printf(it.get_width() -50, 0, id(literata_b), TextAlign::RIGHT, "\ue7b0%.0f", id(scd30_co2).state);
          it.printf(it.get_width()/2, 30, id(literata_med_b), TextAlign::CENTER_HORIZONTAL, "\uf87e%.1f%%", id(scd30_rh).state);
          
          const int y_grid = 250;
          const int graph_width = 215;
          const int graph_height = it.get_height()/2;
          const int graph_start_x = it.get_width() - graph_width; // Right adjust graph
          const int graph_start_y = it.get_height() - graph_height; // Bottom adjust graph

          // Generate y-axis labels
          float graph_lim = id(humi_graph).get_graph_limit_max();
          if (std::isnan(graph_lim))
          {
            graph_lim = 0;
          }
          it.printf(it.get_width()-220, graph_start_y, id(literata_smol), TextAlign::CENTER_RIGHT, "%.0f", graph_lim);
          it.printf(it.get_width()-220, graph_start_y + graph_height/2, id(literata_smol), TextAlign::CENTER_RIGHT, "%.0f", graph_lim/2);

          // Graph
          it.graph(graph_start_x, graph_start_y, id(humi_graph));

      - id: ap_info 
        lambda: |-
          int line_height = 15;
          it.print(0, 0, id(mono_reg), "Config mode.");
          it.print(0, line_height*1, id(mono_reg), "Connect to:");
          it.print(0, line_height*2, id(mono_reg), "SSID: InKli Config");
          it.printf(0, line_height*3, id(mono_reg), "Pass  %s", id(ap_password));

      - id: page_wifi_info 
        lambda: |-
          int line_height = 15;
          it.printf(0, 0, id(mono_med), "IP: %s", id(wifi_ip_addr).state.c_str());
          it.printf(0, line_height*1, id(mono_med), "MAC: %s", id(wifi_mac).state.c_str());
          it.printf(0, line_height*2, id(mono_med), "SSID: %s", id(wifi_ssid).state.c_str());
          it.printf(0, line_height*3, id(mono_med), "Signal strength: %.0f%%", id(wifi_sig).state);
          it.printf(0, line_height*3, id(mono_med), "Signal strength: %.0f%%", id(wifi_sig).state);
          it.printf(0, line_height*4, id(mono_med), "%", id(ap_password));
      - id: page_updating 
        lambda: |-
          it.print(250/2, 122/2, id(literata_b), TextAlign::CENTER, "Updating");
      - id: page_update_failed
        lambda: |-
          it.print(250/2, 122/2, id(literata_b), TextAlign::CENTER, "Update Failed");
    on_page_change: 
      then:
        - lambda: "id(disp).set_full_update_every(1);"  # Will apply on AFTER next update
        - component.update: disp # Likely a partial update
        - lambda: "id(disp).set_full_update_every(60);" # Will apply on AFTER next update
        - component.update: disp # A full update

## Board and project config

esp32:
  board: m5stack-core-esp32-16M
  flash_size: 16MB
  framework:
    type: esp-idf

dashboard_import:
  package_import_url: "github://Duckle29/SCD30_ESP/esphome/inkli.yaml@${version}"
  import_full_config: false

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true

  min_version: 2025.4.0

  project:
    name: "duckle29.inkli"
    version: "${version}"

  on_boot:
    - priority: 900
      then:
        - lambda: |-
            for (int i=0; i<8; i++)
            {
              uint32_t rand_val = esp_random();

              uint8_t min_num, max_num;
              switch (rand_val % 3)
              {
                case 0:
                  min_num = '0';
                  max_num = '9';
                  break;
                case 1:
                  min_num = 'A';
                  max_num = 'Z';
                  break;
                case 2:
                default:
                  min_num = 'a';
                  max_num = 'z';
                  break;
              }

              uint8_t num = (rand_val % ((max_num-min_num) +1)) + min_num;
              if (num == 'l') { num = '2'; } // l and 1 are hard to tell apart. Only 2 instead
              id(ap_password)[i] = num;
            }
    - priority: 600
      then: 
        - lambda: |-
            // Set display page loop order
            /*
                             |-> Co2 -> Temp -> Humi
                             |    |______<______|
              page_wifi_info-|

              ap_info -> page_setup
                |______<______|

              >page_updating<

            */

            id(page_wifi_info).set_next(id(page_co2_graph));

            id(ap_info).set_next(id(page_setup));
            id(page_setup).set_next(id(ap_info));

            id(page_co2_graph).set_next(id(page_t_graph));
            id(page_t_graph).set_next(id(page_rh_graph));
            id(page_rh_graph).set_next(id(page_co2_graph));

            id(page_updating).set_next(id(page_updating));

    - priority: 300
      then: 
        - lambda: |-
            ESP_LOGD("AP_RAND_PASS", "%s", id(ap_password));
            auto ap = id(wifi_id).get_ap();
            std::string pass(id(ap_password), sizeof(id(ap_password)));
            ap.set_ssid("InKli Config");
            ap.set_password(pass);
            id(wifi_id).set_ap(ap);
    - priority: -300
      then:
        - delay: 5min
        - if:
            condition:
              wifi.connected:
            else:
              wifi.disable:

globals:
  - id: ap_password
    type: char[9]

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

i2c:
  - id: i2c_scd30
    sda: GPIO21
    scl: GPIO22
    scan: False
  
  - id: qwiic
    sda: GPIO26
    scl: GPIO27
    scan: True

http_request:
  verify_ssl: True
  # TLS assumes 16 KiB buffers by default. Some servers support MFLN to negotiate smaller buffers, but lets not rely on it
  buffer_size_rx: 4096
  
# debug:
#   update_interval: 5s

ota:
  - platform: http_request
  - platform: esphome
    # on_begin:
    #   then:
    #     - display.page.show: page_updating
    #     - delay: 1s

captive_portal:

esp32_improv:
  authorizer: btn

improv_serial:

# Enable Home Assistant API
api:
  reboot_timeout: 0s

wifi:
  id: wifi_id
  on_connect:
    - display.page.show: page_co2_graph
  ap:
  reboot_timeout: 0s
